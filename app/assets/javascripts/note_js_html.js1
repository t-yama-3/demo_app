window.addEventListener("load", function() {
  let token = document.getElementsByName("csrf-token")[0].content; //セキュリティトークンの取得
  // ハッシュ(連想配列)をURI(UTF-8)にエンコード
  function encodeURIFromHash(data, stockKey="", prefix="&", suffix="") {
    let resultStr = "";  // URIエンコードした文字列を格納する変数
    if (typeof(data) === "object") {  // 対象データがオブジェクトである場合は再帰呼出しを行う
      Object.keys(data).forEach(function(key) {  // 要素の数だけループ処理
        resultStr += encodeURIFromHash(data[key], stockKey + prefix + encodeURIComponent(key) + suffix, "[", "]");
      });
    } else {  // 対象データがオブジェクトでなければURIエンコードをした上で確定する
      resultStr = stockKey + "=" + encodeURIComponent(data);
    }
    if (stockKey === "") { resultStr = resultStr.slice(1); }  //１文字目の不要な"&"又は"="を削除
    return resultStr;
  }
  // メモ投稿(POSTメソッド)の処理
  let addHTMLEvent = function(e) {
    e.preventDefault();  // デフォルトのイベント（HTMLデータ送信など）を無効にする
    //送信データの生成
    let inputText = document.getElementsByClassName("note_form-text")[0].value;  // textareaの入力値を取得
    let url = document.getElementById("note_input").getAttribute("action");
    let hashData = { note: { body: inputText, } };  // 送信するデータをハッシュ形式で指定
    let data = encodeURIFromHash(hashData);
    // Ajax通信を実行
    let xmlHR = new XMLHttpRequest();  // XMLHttpRequestオブジェクトの作成
    xmlHR.open("POST", url, true);  // open(HTTPメソッド, URL, 非同期通信[true:default]か同期通信[false]か）
    xmlHR.setRequestHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
    xmlHR.setRequestHeader("X-CSRF-Token", token);  // リクエストヘッダーを追加（セキュリティトークンの追加）
    xmlHR.send(data);  // sendメソッドでサーバに送信
    // 受信したデータの処理
    xmlHR.onreadystatechange = function() {
      if (xmlHR.readyState === 4) {  // readyStateが4になればデータの読込み完了
        console.log(xmlHR.status);
        if (xmlHR.status === 200) {  // statusが200の場合はリクエストが成功
          let tmpElm = document.createElement("html");
          tmpElm.innerHTML = xmlHR.responseText;
          let bodyHTML = tmpElm.getElementsByTagName("body")[0].innerHTML;
          document.body.innerHTML = bodyHTML;

          document.getElementById("note_input").addEventListener("submit", addHTMLEvent, false);
          let noteDeletes = document.getElementsByClassName("note_delete")
          Array.prototype.forEach.call(noteDeletes, function(noteDelete) {
            noteDelete.addEventListener("click", function(e) { deleteHTMLEvent(e, noteDelete) }, false);
          });
          // テキストエリアを空白に戻す処理は不要
        } else {  // statusが200以外の場合はリクエストが適切でなかったとしてエラー表示
          alert("error");
        }
        // submitボタンのdisableの解除は不要
      }
    };
  };
  document.getElementById("note_input").addEventListener("submit", addHTMLEvent, false);

  // 削除イベントの処理
  let deleteHTMLEvent = function(e, noteDelete) {
    e.preventDefault();
    e.stopPropagation();
    let url = noteDelete.getAttribute("href") + ".json"; //末尾に .json を追加することで送信データがjson形式であることを指定する
    // Ajax通信を実行
    let xmlHR = new XMLHttpRequest(); //XMLHttpRequestの作成
    xmlHR.open("DELETE", url, true); //open(HTTPメソッド, URL, 非同期通信[true:default]か同期通信[false]か）
    xmlHR.responseType = "json"; //レスポンスデータを json形式と指定する
    // xmlHR.setRequestHeader("Content-Type", "application/json");  // リクエストヘッダーを追加(HTTP通信でJSONを送る際のルール)
    xmlHR.setRequestHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
    xmlHR.setRequestHeader("X-CSRF-Token", token);  // リクエストヘッダーを追加（セキュリティトークンの追加）
    xmlHR.send(); //サーバに送信
    // 受信したデータの処理
    xmlHR.onreadystatechange = function() {
      if (xmlHR.readyState === 4) {
        if (xmlHR.status === 200) {
          let note = xmlHR.response;
          document.getElementById("note" + note.id).remove();
        } else {
          alert(xmlHR.status);
        }
      }
    };
  };
  let noteDeletes = document.getElementsByClassName("note_delete")
  Array.prototype.forEach.call(noteDeletes, function(noteDelete) {
    noteDelete.addEventListener("click", function(e) { deleteHTMLEvent(e, noteDelete) }, false);
  });
});
