window.addEventListener("load", function() {
  let token = document.getElementsByName("csrf-token")[0].content; //セキュリティトークンの取得
  // 追加するHTMLデータを生成する関数
  function createHTML(note) {
    // 必要となるタグ及びテキストノードを生成
    let divElm = document.createElement("div"); 
    let spanElm = document.createElement("span");
    let aElm = document.createElement("a");
    let pElm = document.createElement("p");
    let nameText = document.createTextNode("投稿者：" + note.user_name);
    let deleteText = document.createTextNode(" 削除");
    let bodyText = document.createTextNode(note.body);
    // 各タグに属性・属性値を付加
    divElm.setAttribute("class", "note");
    divElm.setAttribute("id", "note" + note.id);
    spanElm.setAttribute("class", "note_name");
    aElm.setAttribute("class", "note_delete");
    aElm.setAttribute("rel", "nofollow");
    aElm.setAttribute("data-method", "delete");
    aElm.setAttribute("href", "/notes/" + note.id);
    aElm.addEventListener("click", function(e) { deleteHTMLEvent(e, aElm) }, false); //ここが大事！
    pElm.setAttribute("class", "note_body");
    // ノードの結合（各子要素にテキストを追加）
    spanElm.appendChild(nameText);
    aElm.appendChild(deleteText);
    pElm.appendChild(bodyText);
    // ノードの結合（親要素に子要素を追加）
    divElm.appendChild(spanElm);
    divElm.appendChild(aElm);
    divElm.appendChild(pElm);
    return divElm;
  };

  // メモ投稿(POSTメソッド)の処理
  let addHTMLEvent = function(e) {
    e.preventDefault();  // デフォルトのイベント（HTMLデータ送信など）を無効にする
    //送信データの生成
    let inputText = document.getElementsByClassName("note_form-text")[0].value;  // textareaの入力値を取得
    let url = document.getElementById("note_input").getAttribute("action");  // 末尾に[.json]を追加して送信データがjson形式であることを指定
    let data = encodeURIComponent("note[body]") + "=" + encodeURIComponent(inputText)
        + "&" + encodeURIComponent("authenticity_token") + "=" + encodeURIComponent(token);
    // let data = encodeURIComponent("note[body]") + "=" + encodeURIComponent(inputText);
    // let data = encodeURI("note[body]=" + inputText);




    let hashData = {  // 送信するデータをハッシュ形式で指定
      note: {body: inputText},  // 入力テキストを送信
      authenticity_token: token  // セキュリティトークンの送信（ここから送信することも可能）
    };


    function encodeURIProc(data) {
      let dataURI = "";
      for (let i = 0; i < Object.keys(data).length; i++) {
        dataURI += Object.keys(data)[i] + "=" + data[Object.keys(data)[i]] + "&";
      }
      return dataURI;
    }

    // Object.keys(hashData).forEach(function(key) {
    //   let val = this[key];
    //   console.log(key, val);
    // }, hashData);
    
    Object.keys(hashData).forEach(function(key) {
      console.log(key, hashData[key]);
    });

    // let dataTest = Object.keys(hashData)[0];
    // let dataTest = Object.keys(hashData).length;
    let dataTest = encodeURIProc(hashData);

    console.log(dataTest);
    // Ajax通信を実行
    let xmlHR = new XMLHttpRequest();  // XMLHttpRequestオブジェクトの作成
    xmlHR.open("POST", url, true);  // open(HTTPメソッド, URL, 非同期通信[true:default]か同期通信[false]か）
    xmlHR.setRequestHeader("Accept", "application/json");  // リクエストヘッダーを追加（クライアントが理解できるコンテンツタイプを通知）
    xmlHR.setRequestHeader("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
    xmlHR.setRequestHeader("X-CSRF-Token", token);  // リクエストヘッダーを追加（セキュリティトークンの追加）
    xmlHR.responseType = "json";  // レスポンスデータをjson形式と指定（textで受信してもJSON.parseでデコードは可能）
    xmlHR.send(data);  // sendメソッドでサーバに送信

    // let inputText = document.getElementsByClassName("note_form-text")[0].value;  // textareaの入力値を取得
    // // let url = document.getElementById("note_input").getAttribute("action") + ".json";  // 末尾に[.json]を追加して送信データがjson形式であることを指定
    // let url = document.getElementById("note_input").getAttribute("action");  // 末尾に[.json]を追加して送信データがjson形式であることを指定
    // let hashData = {  // 送信するデータをハッシュ形式で指定
    //   note: {body: inputText}  // 入力テキストを送信
    //   // authenticity_token: token  // セキュリティトークンの送信（ここから送信することも可能）
    // };
    // let data = JSON.stringify(hashData); // 送信用のjson形式に変換
    // // console.log(hashData.note.body);
    // // data = encodeURIComponent("note[body]") + "=" + encodeURIComponent(inputText);
    // // Ajax通信を実行
    // let xmlHR = new XMLHttpRequest();  // XMLHttpRequestオブジェクトの作成
    // xmlHR.open("POST", url, true);  // open(HTTPメソッド, URL, 非同期通信[true:default]か同期通信[false]か）
    // // xmlHR.responseType = "json";  // レスポンスデータをjson形式と指定（textで受信してもJSON.parseでデコードは可能）
    // xmlHR.setRequestHeader("Accept", "application/json");  // リクエストヘッダーを追加（クライアントが理解できるコンテンツタイプを通知）
    // // xmlHR.setRequestHeader("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
    // xmlHR.setRequestHeader("Content-Type", "application/json");  // リクエストヘッダーを追加(HTTP通信でJSONを送る際のルール)
    // xmlHR.setRequestHeader("X-CSRF-Token", token);  // リクエストヘッダーを追加（セキュリティトークンの追加）
    // xmlHR.send(data);  // sendメソッドでサーバに送信
    // 受信したデータの処理
    xmlHR.onreadystatechange = function() {
      if (xmlHR.readyState === 4) {  // readyStateが4になればデータの読込み完了
        if (xmlHR.status === 200) {  // statusが200の場合はリクエストが成功
          let note = xmlHR.response;  // 受信したjsonデータを変数noteに格納
          console.log(note);
          console.log(xmlHR);
          // console.log(xmlHR.responseText);
          let html = createHTML(note);  // 受信データを元にHTMLを作成
          // let html = createHTML(JSON.parse(note));  // 受信データを元にHTMLを作成
          // let html = createHTML(note);  // 受信データを元にHTMLを作成
          document.getElementsByClassName("notes")[0].appendChild(html);  // 作成したHTMLをドキュメントに追加
          document.getElementsByClassName("note_form-text")[0].value = "";  // テキストエリアを空白に戻す
        } else {  // statusが200以外の場合はリクエストが適切でなかったとしてエラー表示
          alert("error");
        }
        document.getElementsByClassName("note_form-btn")[0].disabled = false;  // submitボタンのdisableを解除
        document.getElementsByClassName("note_form-btn")[0].removeAttribute("data-disable-with");  // submitボタンのdisableを解除(Rails5.0以降はこちらも必要)
      }
    };
  };
  document.getElementById("note_input").addEventListener("submit", addHTMLEvent, false);

  // 削除イベントの処理
  let deleteHTMLEvent = function(e, noteDelete) {
    e.preventDefault();
    e.stopPropagation();
    let url = noteDelete.getAttribute("href") + ".json"; //末尾に .json を追加することで送信データがjson形式であることを指定する
    // Ajax通信を実行
    let xmlHR = new XMLHttpRequest(); //XMLHttpRequestの作成
    xmlHR.open("DELETE", url, true); //open(HTTPメソッド, URL, 非同期通信[true:default]か同期通信[false]か）
    xmlHR.responseType = "json"; //レスポンスデータを json形式と指定する
    xmlHR.setRequestHeader("Content-Type", "application/json");  // リクエストヘッダーを追加(HTTP通信でJSONを送る際のルール)
    xmlHR.setRequestHeader("X-CSRF-Token", token);  // リクエストヘッダーを追加（セキュリティトークンの追加）
    xmlHR.send(); //サーバに送信
    // 受信したデータの処理
    xmlHR.onreadystatechange = function() {
      if (xmlHR.readyState === 4) {
        if (xmlHR.status === 200) {
          let note = xmlHR.response;
          document.getElementById("note" + note.id).remove();
        } else {
          alert(xmlHR.status);
        }
      }
    };
  };
  let noteDeletes = document.getElementsByClassName("note_delete")
  Array.prototype.forEach.call(noteDeletes, function(noteDelete) {
    noteDelete.addEventListener("click", function(e) { deleteHTMLEvent(e, noteDelete) }, false);
  });
  // Array.prototype.forEach.call(noteDeletes, function(noteDelete) {
  //   noteDelete.addEventListener("click", function(e) { deleteHTMLEvent(e, noteDelete) }, false);
  // });
});
