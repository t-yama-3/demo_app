window.addEventListener("load", function() {
  // 追加するHTMLデータを生成する関数
  function buildHTML(note) {
    // 必要となるタグ及びテキストノードを生成
    let elm_div = document.createElement("div"); 
    let elm_span = document.createElement("span");
    let elm_a = document.createElement("a");
    let elm_p = document.createElement("p");
    let text_name = document.createTextNode("投稿者：" + note.user_name);
    let text_delete = document.createTextNode(" 削除");
    let text_body = document.createTextNode(note.body);
    // 各タグに属性・属性値を付加
    elm_div.setAttribute("class", "note");
    elm_span.setAttribute("class", "note_name");
    elm_a.setAttribute("class", "note_delete");
    elm_a.setAttribute("rel", "nofollow");
    elm_a.setAttribute("data-method", "delete");
    elm_a.setAttribute("href", "/notes/" + note.id);
    elm_p.setAttribute("class", "note_body");
    // ノードの結合（各子要素にテキストを追加）
    elm_span.appendChild(text_name);
    elm_a.appendChild(text_delete);
    elm_p.appendChild(text_body);
    // ノードの結合（親要素に子要素を追加）
    elm_div.appendChild(elm_span);
    elm_div.appendChild(elm_a);
    elm_div.appendChild(elm_p);
    return elm_div;
  }

  // 以下、クリックイベントの処理
  let token = document.getElementsByName("csrf-token")[0].content; //tokenの取得（標準の指定）
  document.getElementById("note_input").addEventListener("submit", function(e) {
    e.preventDefault();  // デフォルトのイベント（HTMLデータ送信など）を無効にする
    //送信データの生成
    let input_text = document.getElementsByClassName("note_form-text")[0].value; //textareaの入力値を取得
        // (参考)let token = document.getElementsByName("authenticity_token")[0].getAttribute("value"); // formタグ内からでもtokenの取得は可能
    let url = document.getElementById("note_input").getAttribute("action") + ".json"; //location.hrefで現在のURLを取得（末尾に .json を追加することで送信データがjson形式であることを指定する）
    let json_data = {
      authenticity_token: token,
      note: {body: input_text}
    };
    let data = JSON.stringify(json_data); //送信用のjson形式に変換
    // Ajax通信を実行
    let xmlHR = new XMLHttpRequest(); //XMLHttpRequestの作成
    xmlHR.open("POST", url, true); //open(HTTPメソッド, URL, 非同期通信[true:default]か同期通信[false]か）
    xmlHR.responseType = "json"; //レスポンスデータを json形式と指定する
    xmlHR.setRequestHeader("Content-Type", "application/json"); //ajax通信のリクエストヘッダーを追加
    xmlHR.send(data); //サーバに送信

    // 受信したデータの処理
    xmlHR.onreadystatechange = function() {
      if (xmlHR.readyState === 4) {
        if (xmlHR.status === 200) {
          let json = xmlHR.response;  // 受信したjsonデータを変数に格納
          let html = buildHTML(json);  // jsonデータを元にHTMLを作成
          document.getElementsByClassName("notes")[0].appendChild(html);  // 作成したHTMLをドキュメントに追加
          document.getElementsByClassName("note_form-text")[0].value = "";  // テキストエリアを空白に戻す
        } else {
          alert("error");
        }
        document.getElementsByClassName("note_form-btn")[0].removeAttribute("data-disable-with");  // submitボタンのdisableを解除（Rails5.0以降はこちらを使用）
            // (参考) document.getElementsByClassName("note_form-btn")[0].disabled = false;  // Rails4以前はこちらを使用
      }
    };
  });

  let note_deletes = document.getElementsByClassName("note_delete")
  for (let i = 0; i < note_deletes.length; i++) {
    note_deletes[i].addEventListener("click", function(e) {
      e.preventDefault();
      e.stopPropagation();
      let tmp_node = this;
      let url = tmp_node.getAttribute("href") + ".json"; //末尾に .json を追加することで送信データがjson形式であることを指定する
      let json_data = {
        authenticity_token: token,
      };
      let data = JSON.stringify(json_data); //送信用のjson形式に変換
      // Ajax通信を実行
      let xmlHR = new XMLHttpRequest(); //XMLHttpRequestの作成
      xmlHR.open("DELETE", url, true); //open(HTTPメソッド, URL, 非同期通信[true:default]か同期通信[false]か）
      xmlHR.responseType = "json"; //レスポンスデータを json形式と指定する
      xmlHR.setRequestHeader("Content-Type", "application/json"); //ajax通信のリクエストヘッダーを追加
      xmlHR.send(data); //サーバに送信
      // 受信したデータの処理
      xmlHR.onreadystatechange = function() {
        if (xmlHR.readyState === 4) {
          if (xmlHR.status === 200) {
            tmp_node.parentNode.remove();
          } else {
            alert(xmlHR.status);
          }
        }
      };
    });
  }
});
